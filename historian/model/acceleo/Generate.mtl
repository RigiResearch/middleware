[comment encoding = UTF-8 /]
[module Generate('http://www.rigiresearch.com/middleware/monitoring/1.0.0')/]

[**
 * Creates a properties file based on the paths and their parameters.
 * @param root The root model element
 */]
[template public main(root : Root) { baseUrl : String = root.baseUrl(); }]
[comment @main /]

    [file ('monitoring.properties', false, 'UTF-8')]
# File generated by Historian ([getCurrentTime()/])
# Please edit the parameter values only
#
paths=[root.pathList()/]

        [for (monitor : Monitor | root.monitors) separator ('\n')]
[monitor.path.id/].url=[baseUrl.concat(monitor.path.url)/]
[monitor.path.id/].expression=[monitor.rate.value/]
            [if (monitor.path.parameters->notEmpty())]
# TODO set a value for [monitor.path.parametersComment()/]
[monitor.path.id/].parameters=[monitor.path.paramList()/]
            [/if]
            [for (param : LocatedProperty | monitor.path.parameters) separator ('\n')]
[monitor.path.id/].[param.name/].value=
[monitor.path.id/].[param.name/].location=[param.location.toString().toUpper()/]
            [/for]
        [/for]
    [/file]
[/template]

[**
 * Puts together a base URL based on the supported scheme, host and base path.
 * @param root The root model element
 */]
[template public baseUrl(root : Root) post (trim())]
http[if (root.https)]s[/if]://[root.host/][if (root.basePath.size() > 0)][root.basePath/][/if]
[/template]

[**
 * Renders a path's parameters into a comma-separated list of parameter names.
 * @param path The path containing the parameters
 */]
[template public paramList(path : Path) post(trim())]
[for (param : LocatedProperty | path.parameters) separator (', ')][param.name/][/for]
[/template]

[**
 * Renders all paths into a comma-separated list of path identifiers.
 * @param root The root model element
 */]
[template public pathList(root : Root) post (trim())]
[for (path : Path | root.paths()) separator (', ')][path.id/][/for]
[/template]

[**
 * Renders a message based on the number of parameters of the given path.
 * @param path The path
 */]
[template public parametersComment(path : Path) post (trim())]
[if (path.parameters->size() = 1)]this parameter[/if]
[if (path.parameters->size() > 1)]these parameters[/if]
[/template]

[**
 * Collects the paths in all monitors.
 * @param root The root model element
 */]
[query public paths(root : Root) : Sequence(Path) =
    root.monitors->collect(m : Monitor | m.path)
/]

[**
 * Instantiates a Date object and return its String representation.
 * @param traceabilityContext The context
 */]
[query public getCurrentTime(traceabilityContext : OclAny):
    String = invoke('java.util.Date', 'toString()', Sequence{})
/]
