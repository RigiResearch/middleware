/*
 * name: monitoring
 * domains: monitoring, API
 * authors: Miguel Jimenez (miguel@uvic.ca)
 * description: This metamodel is a representation of the monitors necessary to
 *  track cloud changes at run-time. These monitors are expected to act as
 *  historians that will keep asking the cloud provider for the current list of
 *  computing resources (e.g., virtual machines, disks and networks). Each
 *  monitor focuses on a specific type of resource, therefore it is given one
 *  single URL path.
 */
@Ecore(
    nsPrefix="monitoring",
    nsURI="http://www.rigiresearch.com/middleware/monitoring/1.0.0"
)
@GenModel(
    bundleManifest = "false",
    modelDirectory = "model/build/xcore/main",
    complianceLevel = "8.0"
)
package com.rigiresearch.middleware.metamodels.monitoring

/*
 * <p>The root element.
 */
class Root {
    String host
    String basePath
    boolean https
    contains Monitor[] monitors
}

/*
 * <p>A polling monitor associated with a specific data model and an endpoint
 * that returns the instances of the data model.
 */
class Monitor {
    contains Path path
    contains Schema schema
    contains CronExpression rate
    contains Equivalence[] equivalences
}

/*
 * <p>A GET HTTP path with parameters.
 */
class Path {
    id String url
    contains LocatedProperty[] parameters
}

/*
 * <p>A typed property.
 */
class Property {
    String name
    contains DataType ^type
}

/*
 * <p>A pair of source-target properties that represents a relationship between
 * an property from the API specification model and the environment model.
 */
class Equivalence {
    refers ContainedProperty source
    refers ContainedProperty target
}

/*
 * <p>A property located at a specific location.
 */
class LocatedProperty extends Property {
    PropertyLocation location
}

/*
 * <p>A property contained either by the source or target model.
 */
class ContainedProperty extends Property {
    PropertyContainer ^container
}

/*
 * <p>A composite property to represent arrays and objects.
 */
class CompositeProperty extends Property {
    contains Property[] properties
}

/*
 * <p>A Unix-like cron expression.
 */
class CronExpression {
    /*
     * Every hour.
     */
    String value = "0 * * * *"
}

/*
 * <p>A primitive data type.
 */
class DataType {
    Type ^type
}

/*
 * <p>A composite data type.
 */
class Schema extends DataType {
    contains Property[] properties
}

/*
 * <p>An array data type.
 */
class Array extends DataType {
    contains DataType subtype
}

/*
 * <p>Possible property types based on the OpenAPI specification
 * (cf. JSONDataType).
 */
enum Type {
    ARRAY as "array" = 0,
    BOOLEAN as "boolean" = 1,
    FILE as "file" = 2,
    INTEGER as "integer" = 3,
    NULL as "null" = 4,
    NUMBER as "number" = 5,
    OBJECT as "object" = 6,
    STRING as "string" = 7,
    UNSPECIFIED as "unspecified" = 8
}

/*
 * <p>The source container for a given property.
 */
enum PropertyContainer {
    API as "api" = 0,
    MODEL as "model" = 1
}

/*
 * <p>The location of a located property. This enum is based on the OpenAPI
 * specification (cf. ParameterLocation)
 */
enum PropertyLocation {
    BODY as "body" = 0
    FORM_DATA as "formData" = 1,
    HEADER as "header" = 2,
    PATH as "path" = 3,
    QUERY as "query" = 4,
    UNSPECIFIED as "unspecified" = 5
}
