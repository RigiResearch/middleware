@Ecore(nsPrefix="monitoring", nsURI="http://www.rigiresearch.com/middleware/monitoring/1.0.0")
@GenModel(
    bundleManifest = "false",
    modelDirectory = "model/build/xcore/main",
    complianceLevel = "8.0"
)
package com.rigiresearch.middleware.metamodels.monitoring

type URI wraps java.net.URI
type Function<A, R> wraps java.util.function.Function

/*
 * <p>A polling monitor associated with a specific data model and an endpoint
 * that returns the instances of the data model.
 */
class Monitor {
    contains Path path
    contains Schema schema
    contains CronExpression rate
    contains Equivalence[] equivalences
}

/*
 * <p>A GET HTTP path.
 */
class Path {
    id URI url
    contains Property[] parameters
}

/*
 * <p>An API response class.
 */
class Schema {
    id String name
    contains Property[] properties
}

/*
 * <p>A schema property.
 */
class Property {
    id String name
    Type ^type
    boolean required
}

/*
 * <p>A pair of source-target properties that represents a relationship between
 * an property from the API specification model and the environment model.
 * <p>The {@code transform} function processes the properties as needed. It
 * should be the identity function if no transformation is needed.
 */
class Equivalence {
    refers ContainedProperty source
    refers ContainedProperty target
    Function<ContainedProperty, ContainedProperty> transform
}

/*
 * <p>A property contained either by the source or target model.
 */
class ContainedProperty {
    refers Property property
    PropertyContainer ^container
}

/*
 * <p>A Unix-like cron expression.
 */
class CronExpression {
    String value
}

/*
 * Possible property types based on the OpenAPI specificatin
 */
enum Type {
    ARRAY,
    BOOLEAN,
    INTEGER,
    NUMBER,
    OBJECT,
    STRING
}

/*
 * <p>The source container for a given property.
 */
enum PropertyContainer {
    MODEL,
    API
}
